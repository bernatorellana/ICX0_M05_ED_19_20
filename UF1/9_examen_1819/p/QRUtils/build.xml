<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="QRUtils" default="default" basedir=".">
    <description>Builds, tests, and runs the project QRUtils.</description>
    <import file="nbproject/build-impl.xml"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
        <target name="-post-jar">
        <!--a. Es copiï la carpeta examples dins de dist -->
        <mkdir dir="${dist.dir}\examples"></mkdir>
        <copy  todir="${dist.dir}\examples">
            <fileset dir=".\examples"/>
        </copy>
        <!-- b. Es creï la carpeta output dins de dist. -->
        <mkdir dir="${dist.dir}\output"></mkdir>
        
        <!-- SUPER JAR!!!!-->
        <!-- c. Es fusionin totes les llibreries de lib dins del jar,
        de forma que només haguem de distribuir un únic jar als clients  -->
        <jar destfile="${dist.jar}" update="true">
            <zipgroupfileset dir="lib" includes="**/*.jar"></zipgroupfileset>
            <zipgroupfileset dir="../ZXingCore/dist" includes="**/*.jar"></zipgroupfileset>
            <zipgroupfileset dir="../ZXingCore/lib" includes="**/*.jar"></zipgroupfileset>
        </jar>
        
        
        <echo message="HELLO! "></echo>
    </target>
    
    
    <target name="0_TestQR" description="XXXX" depends="jar"> 
        <!-- Cal que asseguri tenir el jar de l’aplicació.. -->
        <!--antcall target="jar"></antcall-->
        <!-- Mostrarà un splash screen amb un missatge : “Testejant QR”.-->
        <!--splash displayText="Testejant QR"></splash-->
        <!--
        Ens ha de donar a triar entre dues opcions: “Test bàsic” i “Test múltiple”-->
        <input validargs="Test bàsic,Test múltiple" addproperty="opcio"></input>
        <echo message="${opcio}"></echo>
        <if>
            <equals arg1="${opcio}" arg2="Test bàsic"></equals>
            <then>
                <echo message="OPCIO Test Bàsic"></echo>
                
                <!--  1. La tasca executarà l’aplicació dues vegades,
                una per codificar i l’altre per decodificar, 
                de la mateixa forma que a l’exercici 3. 
                Obtenim com a sortides un missatge1.png (codificació) i 
                un decoded1.txt (decodificació)-->
                <echo message="${run.classpath}"></echo>
                <java classname="zxingclient.QREncoder">
                  <arg value="examples/missatge.txt"/> <!-- per cada paràmetre posem un args-->
                  <arg value="examples/missatge1.png"/>
                  <classpath >
                    <pathelement path="${run.classpath}"/>
                  </classpath>
                </java>
                <java classname="zxingclient.QRDecoder">
                   <arg value="examples/missatge1.png"/>
                   <arg value="examples/missatge1.txt"/> <!-- per cada paràmetre posem un args-->                  
                  <classpath >
                    <pathelement path="${run.classpath}"/>
                  </classpath>
                </java>                
                
                <!--  2. Amb la tasca <checksum> calculeu el resum MD5 de cadascun dels arxius 
                i deseu-los a propietats MESSAGE_MD5 i DECODED_MD5. 
                El resum MD5 és una cadena de mida fixa que representa tot l’arxiu.-->
                
                <checksum file="examples/missatge.txt" property="MESSAGE_MD5"/>
                <checksum file="examples/missatge1.txt" property="DECODED_MD5"/>
                <echo message="${MESSAGE_MD5}"></echo>
                <echo message="${DECODED_MD5}"></echo>
                
                <!--  3. Si els resums són iguals, les probabilitats de que els dos arxius siguin 
                idèntiques és MOLT alta. Compareu els dos MD5, en cas d’igualtat mostreu 
                un missatge “Test superat” , altrament mostre un missatge “Test fallat, decoficació incorrecta”                            -->
                <if>
                    <equals arg1="${MESSAGE_MD5}" arg2="${DECODED_MD5}"></equals>
                    <then>
                        <echo message="Test superat"></echo>
                    </then>
                    <else>
                        <echo message="Test fallat"></echo>
                    </else>
                </if>                        
            </then>
            <else>
                <echo message="OPCIO Test Múltiple"></echo>
                <!-- =========================================================== -->
                <!-- 1. Carregeu la informació que hi ha a l’arxiu de propietats “servers.conf” -->
                <property file="servers.conf"></property>
                <echo message="${TEST_SERVER_URL}"></echo>
                <!-- 2. Creeu una carpeta “downloads” -->
                <mkdir dir="downloads"></mkdir>
                <!-- 3. Amb la tasca <get> descarregueu a “downloads” 
                
                l’arxiu que hi ha a la URL que correspon a la propietat 
                TEST_SERVER_URL de servers.conf. -->
               
               <!--
                <get src="${TEST_SERVER_URL}" dest="downloads"/> 
                -->
                  
                <!-- 4. Descomprimiu l’arxiu, i obtindreu múltiples arxius *.png i *.txt -->
                
                <unzip src="downloads/full_tests.zip" dest="downloads"/>
                
              
                <!-- 5. Per cada arxiu png (tots contenen QRs), 
                decodifiqueu-lo. 
                Si l’arxiu png s’anomena “test1.png”,
                deseu el resultat a “test1.decoded.txt”. -->
       
                <foreach target="executaDecodificacio" param="arxiu">
                    <param name="run.classpath" value="${run.classpath}"></param>
                    <fileset dir="downloads" includes="**/*.png"></fileset>
                </foreach>
                <echo message="Tot ha anat bé."></echo>
 
            </else>
                
        </if>
        
    </target>
    
    <target name="executaDecodificacio">
        <basename file="${arxiu}" property="nom" suffix=".png"></basename>
        <echo message="${nom}"></echo>
        
        <java classname="zxingclient.QRDecoder">
           <arg value="downloads/${nom}.png"/>
           <arg value="downloads/${nom}.decoded.txt"/> <!-- per cada paràmetre posem un args-->                  
          <classpath >
            <pathelement path="${run.classpath}"/>
          </classpath>
        </java>         

        <!-- 6. Compareu “test1.decoded.txt” amb “test1.txt” 
        (el missatge original) usant el truc dels <checksum>.
        Si qualsevol dels testos no és correcte, feu fallar el test, altrament 
        l’script mostra un “Tots els testos superats.” a l’acabar. Caldrà usar <basename> -->
        <checksum file="downloads/${nom}.decoded.txt" property="DECODED_MD5"/>
        <checksum file="downloads/${nom}.txt" property="ORIGINAL_MD5"/>
        <echo message="${ORIGINAL_MD5}"></echo>
        <echo message="${DECODED_MD5}"></echo>
                
        <if>
            <not>
                <equals arg1="${ORIGINAL_MD5}" arg2="${DECODED_MD5}"></equals>
            </not>
            <then>
                <echo message="Arxius diferents"></echo>
                <fail message="El test ha fallat"></fail>                            
            </then>
        </if>
    </target>    
  
    
    
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="QRUtils-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
</project>
